import re

from config import path
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hbold
from utils import rapid_hotels_api
from loader import bot
from keyboards import keyboards
from loguru import logger
from database import sqlite

sql = sqlite.Sqlite(path)


class WaiteCityAndCount2(StatesGroup):
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞—Å—Å,
    –≥–¥–µ –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    waite_city_state2 = State()
    waite_photo_answer2 = State()
    waite_photo_count2 = State()
    waite_date_state2 = State()
    waite_count_state2 = State()


async def started_high_price_2(message: types.Message):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞,
    –∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /high_price
    :param message: types.Message
    :return: None
    """
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞üè¢:  ')
    await WaiteCityAndCount2.waite_city_state2.set()


async def started_high_price(callback_query: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞,
    –∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    :param callback_query: types.CallbackQuery
    :return: None
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback_query.from_user.username} —Å–º–æ—Ç—Ä–∏—Ç high_price")
    await callback_query.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞üè¢:  ')
    await callback_query.message.edit_reply_markup(reply_markup=keyboards.inline_buttons_3)
    await WaiteCityAndCount2.waite_city_state2.set()


async def waite_city_state_2(message: types.Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≥–æ—Ä–æ–¥–∞,
    –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å
    :param message: types.Message
    :param state: FSMContext
    :return: None
    """
    if not message.text.isdigit():
        await state.update_data(city=message.text)
        await message.answer('–í–∞–º –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ç–µ–ª–µ–π?', reply_markup=keyboards.inline_buttons_2)
        await WaiteCityAndCount2.waite_photo_answer2.set()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –±—É–∫–≤–∞–º–∏!')


async def waite_photo_state_2(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π,
    —Ç–∞–∫ –∂–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞
    :param callback_query: types.CallbackQuery
    :param state: FSMContext
    :return: None
    """
    photo_data = callback_query.data
    await state.update_data(photo=photo_data)
    await callback_query.message.edit_reply_markup()
    if photo_data == 'yes':
        await callback_query.message.answer('–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å?', reply_markup=keyboards.inline_buttons_4)
        await WaiteCityAndCount2.waite_photo_count2.set()
    else:
        await WaiteCityAndCount2.waite_date_state2.set()
        await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è –∏ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ'
                                            f'{hbold("–î–î.–ú–ú.–ì–ì-–î–î.–ú–ú.–ì–ì")}', reply_markup=keyboards.inline_buttons_4)


async def waite_count_photo_state_2(message: types.Message,  state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—É,
    –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å,
    —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ –≤ —Å–ª–æ–≤–∞—Ä—å,
    –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ
    :param message: types.Message
    :param state: FSMContext
    :return: None
    """
    if message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è –∏ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ'
                             f'{hbold("–î–î.–ú–ú.–ì–ì-–î–î.–ú–ú.–ì–ì")}', reply_markup=keyboards.inline_buttons_4)
        await state.update_data(count_photo=message.text)
        await WaiteCityAndCount2.waite_date_state2.set()


async def waite_date(message: types.Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞—Ç—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å,
    –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π.
    :param message: types.Message
    :param state: FSMContext
    :return: None
    """
    date = re.findall(r"[0-9]*?[0-9]+", message.text)
    logger.info(date)
    if ((len(date) == 6) and (date is not None)
            and (int(date[1]) <= int(date[4])) and (int(date[2]) <= int(date[5]))):
        logger.info('–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
        await message.answer('–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å?', reply_markup=keyboards.inline_buttons_4)
        await state.update_data(date=date)
        await WaiteCityAndCount2.waite_count_state2.set()
    else:
        await message.answer('–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')


async def watch_hotels_2(message: types.Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏,
    –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    :param message: types.Message
    :param state: FSMContext
    :return: None
    """
    person_id = message.from_user.id
    if message.text.isdigit():
        await state.update_data(count=message.text)
        user_data = await state.get_data()
        history_dict = {"city": None, "search_results": []}
        logger.info(f"–í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}: {user_data['city']},"
                    f" {user_data['photo']}, {message.text}")
        await message.answer('–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...‚åõÔ∏è')
        try:
            full_info = rapid_hotels_api.get_id(user_data["city"], "PRICE_HIGHEST_FIRST")
            return_info = full_info[0]["data"]["body"]["searchResults"]["results"]
            history_dict["city"] = full_info[1]
            for index in range(0, int(user_data["count"])):
                price = (((int(user_data["date"][0]) + int(user_data["date"][3])) +
                          (30 * (int(user_data["date"][4]) - int(user_data["date"][1]))))
                         * return_info[index]["ratePlan"]["price"]["exactCurrent"])
                logger.info(f'{price}')
                answer = (f'{hbold(return_info[index]["name"])}'
                          f'\n\n–ê–¥—Ä–µ—Å:  {return_info[index]["address"]["streetAddress"]}'
                          f'\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞:  {return_info[index]["landmarks"][0]["distance"]}'
                          f'\n–†–µ–π—Ç–∏–Ω–≥:  {return_info[index]["starRating"]}'
                          f'\n–¶–µ–Ω–∞:  {round(price, 2)}RUB')
                history_dict["search_results"].append(answer)
                await message.answer(answer)
                if user_data["photo"] == 'yes':
                    for i in range(0, int(user_data["count_photo"])):
                        await bot.send_photo(person_id,
                                             rapid_hotels_api.get_photo(return_info[index]["id"])["hotelImages"][i][
                                                 "baseUrl"].format(
                                                 size="z"
                                             ))
        except (IndexError, KeyError, TypeError) as exc:
            await state.finish()
            await message.answer('–≠—Ç–æ –≤—Å–µ, —á—Ç–æ –Ω–∞–º —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏!')
            logger.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {exc}")
        await state.finish()
        sql.add_history(person_id, history_dict)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏!')


def register_high_price(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers
    :param dp: Dispatcher
    :return: None
    """
    dp.register_callback_query_handler(started_high_price, text='button1')
    dp.register_message_handler(started_high_price_2, commands=['high_price'])
    dp.register_message_handler(waite_city_state_2, state=WaiteCityAndCount2.waite_city_state2)
    dp.register_callback_query_handler(waite_photo_state_2, state=WaiteCityAndCount2.waite_photo_answer2)
    dp.register_message_handler(waite_count_photo_state_2, state=WaiteCityAndCount2.waite_photo_count2)
    dp.register_message_handler(watch_hotels_2, state=WaiteCityAndCount2.waite_count_state2)
    dp.register_message_handler(waite_date, state=WaiteCityAndCount2.waite_date_state2)