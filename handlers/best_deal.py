import re

from config import path
from keyboards import keyboards
from aiogram import types, Dispatcher
from aiogram.utils.markdown import hbold
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from utils import rapid_hotels_api
from time import sleep
from database import sqlite
from loader import bot
from loguru import logger

sql = sqlite.Sqlite(path)


class WaiteCity(StatesGroup):
    """
    –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    waite_city = State()
    waite_distance_to_the_center = State()
    waite_cost = State()
    waite_photo = State()
    waite_count_photo = State()
    waite_date_state = State()
    waite_count = State()


async def started_best_deal(callback_query: types.CallbackQuery):
    """
    –ê–∫—Ç–∏–≤–∞—Ü–∏—è best_deal —á–µ—Ä–µ–∑
    –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    :param callback_query: types.CallbackQuery
    :return: None
    """
    await callback_query.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞üè¢: ')
    await callback_query.message.edit_reply_markup(reply_markup=keyboards.inline_buttons_3)
    await WaiteCity.waite_city.set()


async def started_best_deal_2(message: types.Message):
    """
    –ê–∫—Ç–∏–≤–∞—Ü–∏—è best_deal —á–µ—Ä–µ–∑
    –∫–æ–º–∞–Ω–¥—É /best_deal
    :param message: types.Message
    :return: None
    """
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞üè¢: ')
    await WaiteCity.waite_city.set()


async def chose_distance(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç
    –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–æ —Ü–µ–Ω—Ç—Ä–∞
    —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å –∏
    –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    :param message: types.Message
    :param state: FSMContext
    :return: None
    """

    if not message.text.isdigit():
        logger.info(f'–ì–æ—Ä–æ–¥:{message.text}')
        await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞:\n'
                             f'{hbold("–ü—Ä–∏–º–µ—Ä –Ω–∞–ø–∏—Å–∞–Ω–∏—è: 0,3-1,5 –∏–ª–∏ 0.4-1.6")}', reply_markup=keyboards.inline_buttons_4)
        await state.update_data(city=message.text)
        await WaiteCity.waite_distance_to_the_center.set()
    else:
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –±—É–∫–≤–∞–º–∏!')


async def chose_cost(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º –∂–µ–ª–∞–µ–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞,
    –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å,
    –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É —á–µ–ª–æ–≤–µ–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –∑–∞ –Ω–æ—á—å(–≤ —Ä—É–±–ª—è—Ö),
    —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
    :param message: types.Message
    :param state: FSMContext
    :return: None
    """

    logger.info(f'–î–∏—Å—Ç–∞–Ω—Ü–∏—è:{message.text}')
    distant = re.findall(r"[0-9]*[.]*[,]?[0-9]+", message.text)
    dist_list = [num.replace(",", ".") for num in distant]
    if (len(dist_list) == 2) and not (all(i.isalpha() for i in dist_list)) and (dist_list is not None):
        await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –∑–∞ –Ω–æ—á—å(–≤ —Ä—É–±–ª—è—Ö):\n'
                             f'{hbold("–ü—Ä–∏–º–µ—Ä –Ω–∞–ø–∏—Å–∞–Ω–∏—è: 1000-1500")}', reply_markup=keyboards.inline_buttons_4)
        await state.update_data(distance=dist_list)
        await WaiteCity.waite_cost.set()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ!')


async def chose_count(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º –∂–µ–ª–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –∑–∞ –Ω–æ—á—å(–≤ —Ä—É–±–ª—è—Ö),
    –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å,
    –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö,
    –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞
    :param message: types.Message
    :param state: FSMContext
    :return: None
    """
    logger.info(f'–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:{message.text}')
    price_list = re.findall(r"\d+", message.text)
    if len(price_list) == 2 and price_list is not None:
        await message.answer('–í–∞–º –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ç–µ–ª–µ–π ?', reply_markup=keyboards.inline_buttons_2)
        await state.update_data(cost=price_list)
        await WaiteCity.waite_photo.set()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ!')


async def waite_photo_answer(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö,
    –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    :param callback_query: types.CallbackQuery
    :param state: FSMContext
    :return: None
    """
    await callback_query.message.edit_reply_markup()
    photo_data = callback_query.data
    logger.info(f'–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:{callback_query.data}')
    await state.update_data(photo=photo_data)
    if photo_data == 'yes':
        await callback_query.message.answer("–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å?", reply_markup=keyboards.inline_buttons_4)
        await WaiteCity.waite_count_photo.set()
    else:
        await WaiteCity.waite_date_state.set()
        await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è –∏ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ'
                                            f'{hbold("–î–î.–ú–ú.–ì–ì-–î–î.–ú–ú.–ì–ì")}', reply_markup=keyboards.inline_buttons_4)


async def waite_count_photo(message: types.Message,  state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π,
    –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
    :param message: types.Message
    :param state: FSMContext
    :return: None
    """

    if message.text.isdigit():
        logger.info(f'–ö–æ–ª-–≤–æ —Ñ–æ—Ç–æ:{message.text}')
        await message.answer('–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å?', reply_markup=keyboards.inline_buttons_4)
        await state.update_data(count_photo=message.text)
        await WaiteCity.waite_date_state.set()


async def waite_date_2(message: types.Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞—Ç—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å,
    –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π.
    :param message: types.Message
    :param state: FSMContext
    :return: None
    """
    date = re.findall(r"[0-9]*?[0-9]+", message.text)
    logger.info(date)
    if ((len(date) == 6) and (date is not None)
            and (int(date[1]) <= int(date[4])) and (int(date[2]) <= int(date[5]))):
        logger.info('–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
        await message.answer('–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å?', reply_markup=keyboards.inline_buttons_4)
        await state.update_data(date=date)
        await WaiteCity.waite_count.set()
    else:
        await message.answer('–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')


async def waite_city(message: types.Message, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –µ–≥–æ –¥–∞–Ω–Ω—ã–º,
    –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏ –≤ –ë–î, –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
    :param message: types.Message
    :param state: FSMContext
    :return: None
    """
    person_id = message.from_user.id
    if message.text.isdigit():
        logger.info(f'–ö–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π:{message.text}')
        await message.answer('–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...‚åõÔ∏è', reply_markup=keyboards.keyboard)
        await state.update_data(count=message.text)
        user_data = await state.get_data()
        history_dict = {"city": None, "search_results": []}
        counter = 0
        try:
            full_info = rapid_hotels_api.get_id(user_data["city"], "PRICE_HIGHEST_FIRST")
            return_info = full_info[0]["data"]["body"]["searchResults"]["results"]
            history_dict["city"] = full_info[1]
            for index in range(0, 26):
                dist = float(return_info[index]["landmarks"][0]["distance"][:3].replace(',', '.'))
                if (float(user_data["distance"][0]) <= dist <= float(user_data["distance"][1]) and
                        int(user_data["cost"][0]) <= return_info[index]["ratePlan"]["price"]["exactCurrent"]
                        <= int(user_data["cost"][1])):
                    sleep(0.1)
                    if counter != int(user_data["count"]):
                        price = (((int(user_data["date"][0]) + int(user_data["date"][3])) +
                                  (30 * (int(user_data["date"][4]) - int(user_data["date"][1]))))
                                 * return_info[index]["ratePlan"]["price"]["exactCurrent"])
                        answer = (f'{hbold(return_info[index]["name"])}'
                                  f'\n\n–ê–¥—Ä–µ—Å:  {return_info[index]["address"]["streetAddress"]}'
                                  f'\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞:  {return_info[index]["landmarks"][0]["distance"]}'
                                  f'\n–†–µ–π—Ç–∏–Ω–≥:  {return_info[index]["starRating"]}'
                                  f'\n–¶–µ–Ω–∞:  {round(price, 3)} RUB')
                        await message.answer(answer)
                        if user_data["photo"] == 'yes':
                            for index_2 in range(0, int(user_data["count_photo"])):
                                await bot.send_photo(person_id, rapid_hotels_api.get_photo
                                (return_info[index]["id"])["hotelImages"][index_2]["baseUrl"].format(
                                    size="z"
                                ))
                        history_dict["search_results"].append(answer)
                        counter += 1
                    else:
                        break
        except (IndexError, KeyError) as exc:
            await state.finish()
            await message.answer('–≠—Ç–æ –≤—Å–µ –æ—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ –¥–∞–Ω–Ω—ã–º, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∫–∞–∑–∞–ª–∏.')
            logger.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞:{exc}")
        await state.finish()
        sql.add_history(person_id, history_dict)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç–µ–ª–µ–π —Ü–∏—Ñ—Ä–∞–º–∏!')


async def forming_cancel_button_on_state(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã, —Å–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    :param callback_query: types.CallbackQuery
    :param state: FSMContext
    :return: None
    """
    await state.finish()
    await callback_query.message.edit_reply_markup()
    await callback_query.message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!–ü–æ–∏—Å–∫ –ø—Ä–µ–∫—Ä–∞—â—ë–Ω...‚úñ')


def register_best_deal_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
    :param dp: Dispatcher
    :return: None
    """
    dp.register_message_handler(started_best_deal_2, commands=['best_deal'])
    dp.register_callback_query_handler(waite_photo_answer, state=WaiteCity.waite_photo)
    dp.register_callback_query_handler(started_best_deal, text='button3')
    dp.register_message_handler(waite_count_photo, state=WaiteCity.waite_count_photo)
    dp.register_message_handler(chose_distance, state=WaiteCity.waite_city)
    dp.register_message_handler(chose_cost, state=WaiteCity.waite_distance_to_the_center)
    dp.register_message_handler(chose_count, state=WaiteCity.waite_cost)
    dp.register_message_handler(waite_city, state=WaiteCity.waite_count)
    dp.register_callback_query_handler(forming_cancel_button_on_state, text="cancel",  state="*")
    dp.register_message_handler(waite_date_2, state=WaiteCity.waite_date_state)